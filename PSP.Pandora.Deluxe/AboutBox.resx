<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAMDAAAAAAAACoDgAAFgAAACgAAAAwAAAAYAAAAAEACAAAAAAAgAoAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAKxwXADIiFAA1JRkANykZADsqGgBALhwAQzAdAEcuIABKNSIAVjsnAGQ+KwBWQSsAXUQwAGdF
        LQBoSjIAdE0zAHhTOQA6L1IAQDNfAEg6aQB3WUAAT0B4AINZPACLYj4AmWI/AIhbQgCLYkIAkWREAJlk
        QQCRbEYAnGhGAJVlSwCVa0kAmm1KAJtzTACeblAAmnVXAKZvRQCjb0oAo3NOAKpxSgCwdk8ApXlUALF/
        XACge2IAqYNZALSIXQCpg2cAq4xjAKWCaQCqhmsAr4ltALWNYgC6lGYAq4hwALOOcwC1lXIAs55wALub
        cQC0k3wAuJZ9ALubeAC5onoAxJlqAMKfcgDAnHsAw6FtAMildgDSq3kAyrF9ANawfQBHP6UANkueACtW
        pgA2XagAIEK9AClTtwA8YKwAWUeGAEpElABQS5sAblyVAE9HrgBcVqYAQGWtAFxnrgBLbLEAWnW3AHpp
        qABpYLAAcGm5AGJ/vgB5cbwACjzHABQ0ygAURcQAHVHCACdYwgA1XcoAI1LeAC9gwgA5acgALWXcADpn
        1wAsX+EAM3PkAEFswgBebccAR3PCAFJ8xQBDd9YAUHvdAEd44ACPc5YAiHauAId2tgBngLsAcYK4AF6D
        xwBLgtUAXorRAGaJywBylc0AZozVAGmQ1QB6m9IAvpyDAL6thQCbgLcAtZ+pALOTuACao7wAp6u7AK+w
        twC0tL0Aw52FAMifgwDFpIMAzaSHAMSrggDJrIMAxaOKAMmmjgDDro4AzKmPANKugQDSqo8AyrOKANe3
        hwDMq5MA066VAMe4lwDPsJoAx7iaAMy+ngDStZIA0rqTANm8kADTtJwA1LybANi7mwDgu4UA2LahANq7
        pADbvqgAwru6ANjAjQDbxZcA58KMAObGlwDwzZkA5tOeAPPRnADRw6EA3MSiANbIpADbwqsA28yqANzH
        sQDdyrQA3sS7AN7LugDf0rIA5MqiAOrNowDhwqwA5MypAOrVqAD116gA4cWwAOLMsgDoz7YA4867AOTR
        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
        gAH//wDk///3////d0D///////8AAf///////wC8////////AJD///////937P///////wAU
</value>
  </data>
</root>